version: "3"
services:
  api_gateway:
    container_name: api_gateway
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx_params_handle_websockets:/etc/nginx/nginx_params_handle_websockets:ro
    depends_on:
      - users_api
      - questions_api
    networks:
      - client-side
      - backend-apis
  frontend:
    container_name: frontend
    build:
      context: ./frontend
    image: peerprep_frontend
    ports:
      - 8006:8006
    networks:
      - client-side
  base_api:
    build:
      context: ./backend_services
      dockerfile: ./Dockerfile
    image: peerprep_base_api
    container_name: base_api
    networks:
      - backend-apis
    env_file:
      - ./backend.conf
  users_api:
    build:
      context: ./backend_services/users_service/api
      dockerfile: ../../API_Dockerfile
    container_name: users_api
    image: peerprep_users_api
    networks:
      - backend-apis
      - users
    environment:
      - POSTGRES_HOST=users_database
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_RS256_PRIVATE_KEY=${JWT_RS256_PRIVATE_KEY}
    depends_on:
      - users_database
      - base_api
    env_file:
      - ./backend.conf
  questions_api:
    build:
      context: ./backend_services/questions_service/api
      dockerfile: ../../API_Dockerfile
    image: peerprep_questions_api
    container_name: questions_api
    networks:
      - backend-apis
      - questions
    environment:
      - POSTGRES_HOST=questions_database
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - questions_database
      - base_api
    env_file:
      - ./backend.conf
  users_database:
    build:
      context: ./backend_services/users_service/database
      dockerfile: ../../DB_Dockerfile
    image: peerprep_users_database
    container_name: users_database
    networks:
      - users
    volumes:
      - users-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - ./backend.conf
  questions_database:
    build:
      context: ./backend_services/questions_service/database
      dockerfile: ../../DB_Dockerfile
    image: peerprep_questions_database
    container_name: questions_database
    networks:
      - questions
    volumes:
      - questions-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - ./backend.conf
volumes:
  users-data:
    external: true
  questions-data:
    external: true
networks:
  users:
  questions:
  client-side:
  backend-apis:
